#!/bin/bash

# 共通ライブラリを読み込み
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/common.sh"

# 使用方法
usage() {
    echo -e "${CYAN}${BOLD}🚀 Media-to-Media バッチ処理ツール${NC}"
    echo
    echo -e "${CYAN}使用方法:${NC}"
    echo "  media-batch [オプション] <変換タイプ> <入力ディレクトリ> [出力ディレクトリ]"
    echo
    echo -e "${CYAN}変換タイプ:${NC}"
    echo -e "${WHITE}  音声変換:${NC}"
    echo "    mp3        MP4 → MP3"
    echo "    mp3hq      MP4 → MP3 (高音質)"
    echo "    aac        MP4 → AAC"
    echo "    wav        MP4 → WAV"
    echo -e "${WHITE}  画像変換:${NC}"
    echo "    png        PDF → PNG"
    echo "    pnghq      PDF → PNG (高品質)"
    echo "    jpg        PDF → JPG"
    echo "    jpghq      PDF → JPG (高品質)"
    echo -e "${WHITE}  その他:${NC}"
    echo "    auto       ファイル拡張子に基づいて自動判別"
    echo
    echo -e "${CYAN}オプション:${NC}"
    echo "  -h, --help       このヘルプを表示"
    echo "  -r, --recursive  サブディレクトリも再帰的に処理"
    echo "  -f, --filter     ファイル名フィルタ（正規表現）"
    echo "  -j, --jobs       並列処理数を指定"
    echo "  -q, --quality    品質を指定"
    echo "  -v, --verify     変換後にファイルを検証"
    echo "  --dry-run        実際の変換は行わず、処理対象を表示のみ"
    echo "  --skip-existing  既存ファイルをスキップ"
    echo "  --organize       出力を日付別に整理"
    echo
    echo -e "${CYAN}例:${NC}"
    echo "  media-batch mp3 ~/Videos ~/Music"
    echo "  media-batch -r png ~/Documents/PDFs ~/Images"
    echo "  media-batch -j 8 -q 320k mp3hq ~/Downloads"
    echo "  media-batch --dry-run auto ~/Media"
}

# オプション解析
RECURSIVE=false
FILTER=""
JOBS=""
QUALITY=""
VERIFY_FILES=false
DRY_RUN=false
SKIP_EXISTING=false
ORGANIZE_OUTPUT=false
CONVERSION_TYPE=""
INPUT_DIR=""
OUTPUT_DIR=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -r|--recursive)
            RECURSIVE=true
            shift
            ;;
        -f|--filter)
            FILTER="$2"
            shift 2
            ;;
        -j|--jobs)
            JOBS="$2"
            shift 2
            ;;
        -q|--quality)
            QUALITY="$2"
            shift 2
            ;;
        -v|--verify)
            VERIFY_FILES=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --skip-existing)
            SKIP_EXISTING=true
            shift
            ;;
        --organize)
            ORGANIZE_OUTPUT=true
            shift
            ;;
        -*)
            echo -e "${RED}❌ 不明なオプション: $1${NC}"
            usage
            exit 1
            ;;
        *)
            if [[ -z "$CONVERSION_TYPE" ]]; then
                CONVERSION_TYPE="$1"
            elif [[ -z "$INPUT_DIR" ]]; then
                INPUT_DIR="$1"
            elif [[ -z "$OUTPUT_DIR" ]]; then
                OUTPUT_DIR="$1"
            else
                echo -e "${RED}❌ 余分な引数: $1${NC}"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# 引数チェック
if [[ -z "$CONVERSION_TYPE" || -z "$INPUT_DIR" ]]; then
    usage
    exit 1
fi

# 入力ディレクトリチェック
if [[ ! -d "$INPUT_DIR" ]]; then
    echo -e "${RED}❌ エラー: 入力ディレクトリが見つかりません: $INPUT_DIR${NC}"
    exit 1
fi

# 並列処理数設定
if [[ -n "$JOBS" ]]; then
    PARALLEL_JOBS="$JOBS"
fi

# ファイル一覧取得
get_files() {
    local input_dir=$1
    local pattern=$2
    local files=()
    
    if [[ "$RECURSIVE" == "true" ]]; then
        if [[ -n "$FILTER" ]]; then
            mapfile -t files < <(find "$input_dir" -type f -name "$pattern" | grep -E "$FILTER")
        else
            mapfile -t files < <(find "$input_dir" -type f -name "$pattern")
        fi
    else
        if [[ -n "$FILTER" ]]; then
            mapfile -t files < <(find "$input_dir" -maxdepth 1 -type f -name "$pattern" | grep -E "$FILTER")
        else
            mapfile -t files < <(find "$input_dir" -maxdepth 1 -type f -name "$pattern")
        fi
    fi
    
    printf '%s\n' "${files[@]}"
}

# 出力パス生成
generate_output_path() {
    local input_file=$1
    local extension=$2
    local base_output_dir=$3
    
    local basename=$(basename "$input_file")
    local filename="${basename%.*}"
    local output_file="$filename.$extension"
    
    if [[ "$ORGANIZE_OUTPUT" == "true" ]]; then
        local date_dir=$(date +%Y-%m-%d)
        local output_path="$base_output_dir/$date_dir/$output_file"
        mkdir -p "$(dirname "$output_path")"
    elif [[ -n "$base_output_dir" ]]; then
        local output_path="$base_output_dir/$output_file"
        mkdir -p "$base_output_dir"
    else
        local output_path="${input_file%.*}.$extension"
    fi
    
    echo "$output_path"
}

# 変換実行
execute_conversion() {
    local file=$1
    local type=$2
    local output_file=$3
    
    # 既存ファイルチェック
    if [[ "$SKIP_EXISTING" == "true" && -f "$output_file" ]]; then
        echo -e "${YELLOW}   ⚠️  スキップ: $(basename "$output_file") は既に存在します${NC}"
        return 0
    fi
    
    local start_time=$(date +%s)
    local success=false
    
    case $type in
        mp3|mp3hq)
            local quality=${QUALITY:-$MP3_QUALITY}
            if [[ "$type" == "mp3hq" && -z "$QUALITY" ]]; then
                quality="320k"
            fi
            if ffmpeg -i "$file" -vn -acodec mp3 -ab "$quality" "$output_file" -loglevel error -hide_banner 2>/dev/null; then
                success=true
            fi
            ;;
        aac)
            local quality=${QUALITY:-$AAC_QUALITY}
            if ffmpeg -i "$file" -vn -acodec aac -ab "$quality" "$output_file" -loglevel error -hide_banner 2>/dev/null; then
                success=true
            fi
            ;;
        wav)
            if ffmpeg -i "$file" -vn -acodec pcm_s16le "$output_file" -loglevel error -hide_banner 2>/dev/null; then
                success=true
            fi
            ;;
        png|pnghq)
            local dpi=${QUALITY:-$PNG_DPI}
            if [[ "$type" == "pnghq" && -z "$QUALITY" ]]; then
                dpi="300"
            fi
            if pdftoppm -png -r "$dpi" "$file" "${output_file%.*}" >/dev/null 2>&1; then
                success=true
            fi
            ;;
        jpg|jpghq)
            local dpi=${QUALITY:-$JPG_DPI}
            if [[ "$type" == "jpghq" && -z "$QUALITY" ]]; then
                dpi="300"
            fi
            if pdftoppm -jpeg -r "$dpi" "$file" "${output_file%.*}" >/dev/null 2>&1; then
                success=true
            fi
            ;;
    esac
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    if [[ "$success" == "true" ]]; then
        local output_size=$(get_file_size "$output_file")
        echo -e "${GREEN}   ✅ 完了${NC} ($(format_duration $duration)) - 出力: $(format_size $output_size)"
        log_success "バッチ変換完了: $file → $output_file"
        
        # ファイル検証
        if [[ "$VERIFY_FILES" == "true" ]]; then
            local verify_type=""
            case $type in
                mp3|mp3hq|aac|wav) verify_type="audio" ;;
                png|pnghq|jpg|jpghq) verify_type="image" ;;
            esac
            
            if [[ -n "$verify_type" ]]; then
                if verify_file "$output_file" "$verify_type"; then
                    echo -e "${GREEN}   🔍 検証: OK${NC}"
                else
                    echo -e "${RED}   🔍 検証: エラー${NC}"
                    log_error "バッチ変換検証エラー: $output_file"
                fi
            fi
        fi
        return 0
    else
        echo -e "${RED}   ❌ エラー: 変換に失敗しました${NC}"
        log_error "バッチ変換エラー: $file"
        return 1
    fi
}

# 自動変換タイプ判別
detect_conversion_type() {
    local file=$1
    local ext="${file##*.}"
    
    case "${ext,,}" in
        mp4|mov|avi|mkv|flv|webm)
            echo "mp3"
            ;;
        pdf)
            echo "png"
            ;;
        *)
            echo ""
            ;;
    esac
}

# メイン処理
main() {
    local start_time=$(date +%s)
    
    echo -e "${PURPLE}🚀 Media-to-Media バッチ処理を開始します${NC}"
    echo -e "${WHITE}変換タイプ: $CONVERSION_TYPE | 入力: $INPUT_DIR${NC}"
    if [[ -n "$OUTPUT_DIR" ]]; then
        echo -e "${WHITE}出力: $OUTPUT_DIR${NC}"
    fi
    echo -e "${WHITE}並列処理: $PARALLEL_JOBS | 再帰: $RECURSIVE${NC}"
    echo
    
    # ファイル一覧取得
    local files=()
    case $CONVERSION_TYPE in
        mp3|mp3hq|aac|wav)
            mapfile -t files < <(get_files "$INPUT_DIR" "*.mp4")
            mapfile -t temp_files < <(get_files "$INPUT_DIR" "*.mov")
            files+=("${temp_files[@]}")
            mapfile -t temp_files < <(get_files "$INPUT_DIR" "*.avi")
            files+=("${temp_files[@]}")
            ;;
        png|pnghq|jpg|jpghq)
            mapfile -t files < <(get_files "$INPUT_DIR" "*.pdf")
            ;;
        auto)
            mapfile -t files < <(get_files "$INPUT_DIR" "*.*")
            ;;
        *)
            echo -e "${RED}❌ エラー: 不明な変換タイプ: $CONVERSION_TYPE${NC}"
            exit 1
            ;;
    esac
    
    if [[ ${#files[@]} -eq 0 ]]; then
        echo -e "${YELLOW}⚠️  処理対象のファイルが見つかりませんでした${NC}"
        exit 0
    fi
    
    echo -e "${BLUE}📁 処理対象ファイル: ${#files[@]}個${NC}"
    
    # Dry run モード
    if [[ "$DRY_RUN" == "true" ]]; then
        echo -e "${CYAN}🔍 Dry run モード - 実際の変換は行いません${NC}"
        echo
        for file in "${files[@]}"; do
            local type=$CONVERSION_TYPE
            if [[ "$type" == "auto" ]]; then
                type=$(detect_conversion_type "$file")
                if [[ -z "$type" ]]; then
                    echo -e "${YELLOW}⚠️  スキップ: $(basename "$file") (対応していない形式)${NC}"
                    continue
                fi
            fi
            
            local ext=""
            case $type in
                mp3|mp3hq) ext="mp3" ;;
                aac) ext="aac" ;;
                wav) ext="wav" ;;
                png|pnghq) ext="png" ;;
                jpg|jpghq) ext="jpg" ;;
            esac
            
            local output_file=$(generate_output_path "$file" "$ext" "$OUTPUT_DIR")
            echo -e "${BLUE}→${NC} $(basename "$file") ${CYAN}→${NC} $(basename "$output_file")"
        done
        return 0
    fi
    
    # 実際の変換処理
    local jobs=()
    local current=0
    local successful=0
    local failed=0
    
    for file in "${files[@]}"; do
        ((current++))
        
        local type=$CONVERSION_TYPE
        if [[ "$type" == "auto" ]]; then
            type=$(detect_conversion_type "$file")
            if [[ -z "$type" ]]; then
                echo -e "${YELLOW}📁 ファイル ${current}/${#files[@]}: $(basename "$file")${NC}"
                echo -e "${YELLOW}   ⚠️  スキップ: 対応していない形式${NC}"
                ((failed++))
                continue
            fi
        fi
        
        local ext=""
        case $type in
            mp3|mp3hq) ext="mp3" ;;
            aac) ext="aac" ;;
            wav) ext="wav" ;;
            png|pnghq) ext="png" ;;
            jpg|jpghq) ext="jpg" ;;
        esac
        
        local output_file=$(generate_output_path "$file" "$ext" "$OUTPUT_DIR")
        
        local job="echo -e '${YELLOW}📁 ファイル ${current}/${#files[@]}: $(basename "$file")${NC}' && \
                  echo -e '${BLUE}   出力先: $(basename "$output_file")${NC}' && \
                  execute_conversion '$file' '$type' '$output_file' && echo"
        
        jobs+=("$job")
    done
    
    # 並列実行
    if [[ $PARALLEL_JOBS -gt 1 ]] && [[ ${#jobs[@]} -gt 1 ]]; then
        echo -e "${BLUE}🚀 並列処理で変換を実行します...${NC}"
        run_parallel $PARALLEL_JOBS "${jobs[@]}"
    else
        for job in "${jobs[@]}"; do
            eval "$job"
        done
    fi
    
    # 結果集計
    for file in "${files[@]}"; do
        local type=$CONVERSION_TYPE
        if [[ "$type" == "auto" ]]; then
            type=$(detect_conversion_type "$file")
            [[ -z "$type" ]] && continue
        fi
        
        local ext=""
        case $type in
            mp3|mp3hq) ext="mp3" ;;
            aac) ext="aac" ;;
            wav) ext="wav" ;;
            png|pnghq) ext="png" ;;
            jpg|jpghq) ext="jpg" ;;
        esac
        
        local output_file=$(generate_output_path "$file" "$ext" "$OUTPUT_DIR")
        
        if [[ -f "$output_file" ]]; then
            ((successful++))
        else
            ((failed++))
        fi
    done
    
    local end_time=$(date +%s)
    local total_duration=$((end_time - start_time))
    
    echo -e "${GREEN}🎉 バッチ処理が完了しました！${NC}"
    echo -e "${WHITE}成功: $successful | 失敗: $failed | 総処理時間: $(format_duration $total_duration)${NC}"
    
    # 通知送信
    if [[ $successful -gt 0 ]]; then
        send_notification "Media-to-Media" "${successful}個のファイルをバッチ変換しました" "Glass"
    fi
    
    log_info "バッチ処理完了: タイプ=$CONVERSION_TYPE, 成功=$successful, 失敗=$failed, 時間=${total_duration}s"
}

# 依存関係チェック
check_dependencies() {
    local deps_ok=true
    
    case $CONVERSION_TYPE in
        mp3|mp3hq|aac|wav|auto)
            if ! check_dependency "ffmpeg" "ffmpeg"; then
                deps_ok=false
            fi
            ;;
    esac
    
    case $CONVERSION_TYPE in
        png|pnghq|jpg|jpghq|auto)
            if ! check_dependency "pdftoppm" "poppler-utils"; then
                deps_ok=false
            fi
            ;;
    esac
    
    if [[ "$deps_ok" == "false" ]]; then
        echo -e "${YELLOW}macOS: brew install ffmpeg poppler${NC}"
        echo -e "${YELLOW}Ubuntu: sudo apt install ffmpeg poppler-utils${NC}"
        exit 1
    fi
}

# 実行
check_dependencies
main 